name: Build Deploy Destroy

on:
  push:
    branches:
      - main
      - deploy
env:
  APP_NAME: react-test
  TERRAFORM_VERSION: 1.12.1
  AWS_REGION: ap-southeast-1

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: ./deploy-with-ecs/simple-react-app
          push: true
          tags: ${{ vars.DOCKER_USER }}/${{ env.APP_NAME }}:latest

  deploy:
    name: Deploy on AWS
    runs-on: ubuntu-latest
    needs: build
    env:
      TF_TOKEN_app_terraform_io: ${{ secrets.TF_CLOUD_TOKEN }}
    outputs:
      alb_dns_name: ${{ steps.alb_dns.outputs.alb_dns_name }}
    steps:
      - uses: actions/checkout@v4
        name: checkout repo
      - uses: aws-actions/configure-aws-credentials@v4
        name: Setup AWS Identity
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - uses: hashicorp/setup-terraform@v3
        name: setup terraform
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      - name: Configure Terraform Credentials
        run: |
          mkdir -p ~/.terraform.d
          echo '{"credentials":{"app.terraform.io":{"token":"${{ secrets.TF_CLOUD_TOKEN }}"}}}' > ~/.terraform.d/credentials.tfrc.json
      - name: Terraform Init
        id: init
        working-directory: ./deploy-with-ecs/terraform
        run: terraform init -input=false

      - name: Terraform Plan
        id: plan
        env:
          TF_VAR_cnc_ssh_public_key: ${{ secrets.CNC_SSH_PUBLIC_KEY }}
        working-directory: ./deploy-with-ecs/terraform
        run: terraform plan -no-color -input=false
        continue-on-error: false
      - name: Terraform Apply
        id: apply
        working-directory: ./deploy-with-ecs/terraform/
        env:
          TF_VAR_cnc_ssh_public_key: ${{ secrets.CNC_SSH_PUBLIC_KEY }}
        run: terraform apply -auto-approve -input=false
        continue-on-error: false
      - name: Get ALB DNS Name
        id: alb_dns
        working-directory: ./deploy-with-ecs/terraform/
        run: |
          echo "alb_dns_name=$(terraform output -raw alb_dns_name)" >> "${GITHUB_OUTPUT}"

  test:
    runs-on: ubuntu-latest
    name: Test Deployment
    needs: deploy
    steps:
      - name: Hold on
        run: |
          echo "Wating for loadbalancer start working"
          sleep 180
          echo "Done"
      - name: Test ALB Endpoint
        run: |
          echo "Testing ALB Endpoint: ${{ needs.deploy.outputs.alb_dns_name }}"
          curl -I http://${{ needs.deploy.outputs.alb_dns_name }}
  auto-destroy:
    name: Auto Destroy After 30 Minutes
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
      TF_TOKEN_app_terraform_io: ${{ secrets.TF_CLOUD_TOKEN }}
    needs: test
    if: always() && needs.test.result != 'failure'
    steps:
      - name: Wait for 30 minutes
        run: |
          echo "Infrastructure will be destroyed in 30 minutes..."
          echo "Started at: $(date)"
          sleep 1800  # 30 minutes = 1800 seconds
          echo "30 minutes elapsed, proceeding with destruction at: $(date)"

      - uses: actions/checkout@v4
        name: checkout repo

      - uses: aws-actions/configure-aws-credentials@v4
        name: AWS Identity Setup
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - uses: hashicorp/setup-terraform@v3
        name: setup tf
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure Terraform Credentials
        run: |
          mkdir -p ~/.terraform.d
          echo '{"credentials":{"app.terraform.io":{"token":"${{ secrets.TF_CLOUD_TOKEN }}"}}}' > ~/.terraform.d/credentials.tfrc.json

      - name: Terraform destroy
        env:
          TF_VAR_cnc_ssh_public_key: ${{ secrets.CNC_SSH_PUBLIC_KEY }}
        working-directory: ./deploy-with-ecs/terraform/
        run: |
          terraform init
          terraform destroy -auto-approve -input=false
          echo "Infrastructure destroyed at: $(date)"
